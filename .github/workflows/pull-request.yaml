name: Pull Request

on:
  pull_request:
    branches:
      - main
    paths:
      - charts/**

jobs:
  validate:
    name: Validate changed charts
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
        with:
          fetch-depth: 0

      - name: Install Python
        uses: actions/setup-python@bd6b4b6205c4dbad673328db7b31b7fab9e241c0 # v4.6.1
        with:
          python-version: "3.x"

      - name: Install Helm
        uses: azure/setup-helm@5119fcb9089d432beecbf79bb2c7915207344b78 # v3.5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          version: latest

      - name: Install Helm Docs
        uses: action-stars/install-tool-from-github-release@94bce72df745fe8ed2811e6cdc3ec333022019e9 # v0.1.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          owner: norwoodj
          repository: helm-docs
          arch_amd64: x86_64
          os_linux: Linux
          check_command: helm-docs --version
          version: latest

      - name: Install Artifact Hub CLI
        uses: action-stars/install-tool-from-github-release@94bce72df745fe8ed2811e6cdc3ec333022019e9 # v0.1.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          owner: artifacthub
          repository: hub
          name: ah
          check_command: ah version
          version: latest

      - name: Install YQ
        uses: action-stars/install-tool-from-github-release@94bce72df745fe8ed2811e6cdc3ec333022019e9 # v0.1.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          owner: mikefarah
          repository: yq
          extract: false
          filename_format: "{name}_{os}_{arch}"
          check_command: yq --version
          version: latest

      - name: Install Kubeconform
        uses: action-stars/install-tool-from-github-release@94bce72df745fe8ed2811e6cdc3ec333022019e9 # v0.1.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          owner: yannh
          repository: kubeconform
          filename_format: "{name}-{os}-{arch}.{ext}"
          check_command: kubeconform -v
          version: latest

      - name: Install chart-testing
        uses: helm/chart-testing-action@e8788873172cb653a90ca2e819d79d65a66d4e76 # v2.4.0

      - name: Check for changes
        id: changes
        run: |
          set -euo pipefail
          changed="$(ct list-changed --target-branch main --chart-dirs charts)"
          if [[ -n "${changed}" ]]
          then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "charts=$(echo "${changed}" | tr '\n' ',' | rev | cut -c 2- | rev | jq -Rrc '[split(",") | .[] | split("/") | .[1]] | join(",")')" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "charts=" >> $GITHUB_OUTPUT
          fi

      - name: Configure Helm
        if: fromJSON(steps.changes.outputs.changed)
        run: helm repo add bitnami https://charts.bitnami.com/bitnami/

      - name: Run Helm Docs check
        if: fromJSON(steps.changes.outputs.changed)
        run: |
          set -euo pipefail
          helm-docs
          if [[ -n "$(git status --porcelain --untracked-files=no)" ]]
          then
            echo "Documentation not up to date. Please run helm-docs and commit changes!" >&2
            exit 1
          fi

      - name: Run Artifact Hub lint
        if: fromJSON(steps.changes.outputs.changed)
        run: ah lint --kind helm || exit 1

      - name: Run chart-testing lint
        if: fromJSON(steps.changes.outputs.changed)
        run: ct lint --target-branch=main --chart-dirs=charts --check-version-increment=false

      - name: Run Kubeconform
        if: fromJSON(steps.changes.outputs.changed)
        run: |
          set -euo pipefail

          charts="${{ steps.changes.outputs.charts }}"
          for chart in ${charts//,/ }
          do
            values="./charts/${chart}/ci/kubeconform.yaml"
            if [[ ! -f "${values}" ]]
            then
              values="./charts/${chart}/test-values.yaml"
              touch "${values}"
            fi

            k8s_version_stable="$(curl -sL https://dl.k8s.io/release/stable.txt | grep -Eo '[0-9]+\.[0-9]+').0"
            k8s_versions_in="${{ vars.K8S_VERSIONS }}"
            k8s_versions="${k8s_versions_in:-$k8s_version_stable}"
            for k8s_version in ${k8s_versions//,/ }
            do
              echo "Chart: ${chart}, K8s: ${k8s_version}"
              helm template --kube-version "${k8s_version}" "./charts/${chart}" --values "${values}" | kubeconform --kubernetes-version "${k8s_version}" --schema-location default --schema-location 'https://raw.githubusercontent.com/datreeio/CRDs-catalog/main/{{.Group}}/{{.ResourceKind}}_{{.ResourceAPIVersion}}.json' --strict --summary
            done
          done

      - name: Create Kind cluster
        if: fromJSON(steps.changes.outputs.changed)
        uses: helm/kind-action@fa81e57adff234b2908110485695db0f181f3c67 # v1.7.0

      - name: Run chart-testing install
        if: fromJSON(steps.changes.outputs.changed)
        run: ct install --target-branch=main --chart-dirs=charts --helm-extra-args="--timeout 600s"
